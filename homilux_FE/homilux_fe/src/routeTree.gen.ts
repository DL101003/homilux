/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/_user'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AdminRouteImport } from './routes/_admin'
import { Route as UserIndexRouteImport } from './routes/_user/index'
import { Route as PublicRegisterRouteImport } from './routes/_public/register'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as PublicOauth2RedirectRouteImport } from './routes/_public/oauth2.redirect'
import { Route as AdminAdminDashboardRouteImport } from './routes/_admin/admin.dashboard'

const UserRoute = UserRouteImport.update({
  id: '/_user',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIndexRoute = UserIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserRoute,
} as any)
const PublicRegisterRoute = PublicRegisterRouteImport.update({
  id: '/_public/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/_public/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicOauth2RedirectRoute = PublicOauth2RedirectRouteImport.update({
  id: '/_public/oauth2/redirect',
  path: '/oauth2/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAdminDashboardRoute = AdminAdminDashboardRouteImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/': typeof UserIndexRoute
  '/admin/dashboard': typeof AdminAdminDashboardRoute
  '/oauth2/redirect': typeof PublicOauth2RedirectRoute
}
export interface FileRoutesByTo {
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/': typeof UserIndexRoute
  '/admin/dashboard': typeof AdminAdminDashboardRoute
  '/oauth2/redirect': typeof PublicOauth2RedirectRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_admin': typeof AdminRouteWithChildren
  '/_authenticated': typeof AuthenticatedRoute
  '/_user': typeof UserRouteWithChildren
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_user/': typeof UserIndexRoute
  '/_admin/admin/dashboard': typeof AdminAdminDashboardRoute
  '/_public/oauth2/redirect': typeof PublicOauth2RedirectRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/'
    | '/admin/dashboard'
    | '/oauth2/redirect'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/register' | '/' | '/admin/dashboard' | '/oauth2/redirect'
  id:
    | '__root__'
    | '/_admin'
    | '/_authenticated'
    | '/_user'
    | '/_public/login'
    | '/_public/register'
    | '/_user/'
    | '/_admin/admin/dashboard'
    | '/_public/oauth2/redirect'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminRoute: typeof AdminRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRoute
  UserRoute: typeof UserRouteWithChildren
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
  PublicOauth2RedirectRoute: typeof PublicOauth2RedirectRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_user/': {
      id: '/_user/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UserIndexRouteImport
      parentRoute: typeof UserRoute
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/oauth2/redirect': {
      id: '/_public/oauth2/redirect'
      path: '/oauth2/redirect'
      fullPath: '/oauth2/redirect'
      preLoaderRoute: typeof PublicOauth2RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin/admin/dashboard': {
      id: '/_admin/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminAdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminAdminDashboardRoute: typeof AdminAdminDashboardRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAdminDashboardRoute: AdminAdminDashboardRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface UserRouteChildren {
  UserIndexRoute: typeof UserIndexRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserIndexRoute: UserIndexRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AdminRoute: AdminRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRoute,
  UserRoute: UserRouteWithChildren,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
  PublicOauth2RedirectRoute: PublicOauth2RedirectRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
